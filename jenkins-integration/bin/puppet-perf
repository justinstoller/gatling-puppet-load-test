#!/usr/bin/env ruby

require 'json'

module Puppet
  module Performance
    class Tester
      PE_LOCATION = {
        '3.1' => 'http://neptune.delivery.puppetlabs.net/3.1/ci-ready',
        '3.0' => 'http://neptune.delivery.puppetlabs.net/archives/releases/3.0.1',
        '2.8' => 'http://neptune.delivery.puppetlabs.net/archives/releases/2.8.3'
      }

      SUPPORTED_STEPS = {
        "install"           => :install,
        "simulate"          => :simulate,
        "cobbler-provision" => :cobbler_provision
      }

      def initialize(settings)
        @settings = settings
      end

      def perform(step, arguments = nil)
        if !SUPPORTED_STEPS.keys.include? step
          raise "Unrecognized step \"#{step}\".\nSupported steps are: #{SUPPORTED_STEPS.keys}"
        end

        if arguments.nil?
          send(SUPPORTED_STEPS[step])
        else
          send(SUPPORTED_STEPS[step], arguments)
        end
      end

      def cobbler_provision()
        raise 'Puppet Master ipaddress is required for cobbler provisioning' unless @settings[:master_ip]
        run 'cobbler_provision.sh', @settings[:master_ip], @settings[:ssh_keyfile]
      end

      def install(version)
        ENV['pe_dist_dir'] = PE_LOCATION[version]

        run 'pe_uninstall.sh', @settings[:puppet_master], @settings[:ssh_keyfile]
        write_systest_config_file()
        run "pe_install.sh", @settings[:systest_config], @settings[:ssh_keyfile]
      end

      def simulate(arguments)
        sim_id = arguments["id"]
        scenario = arguments["scenario"]
        filename = write_scenario_to_file(sim_id, scenario)

        run "pe_restart.sh", @settings[:systest_config], @settings[:ssh_keyfile]
        run "pe_classify.sh", filename, @settings[:systest_config], @settings[:ssh_keyfile], sim_id
        run 'sbt.sh', sim_id, @settings[:puppet_master], filename, @settings[:sbtpath]
      end

      private
      def run(script, *args)
        args = args.join '" "'
        if (args.length > 0)
          args = '"' + args + '"'
        end
        puts "Running '#{script} #{args}'"

        script_file = "scripts/#{script}"

        successful = system "bash -x #{script_file} #{args}"
        raise "Error running #{script}" unless successful
      end

      def write_systest_config_file()
        # Dominic M: feeling extra dirty - temporary until job is moved to jenkins-enterprise
        ip = (@settings[:master_ip].nil?) ? nil : "ip: #{@settings[:master_ip]}"
        config = <<-EOS
          HOSTS:
            #{@settings[:master_hostname]}:
              roles:
                - master
                - agent
                - dashboard
                - database
              platform: el-6-x86_64
              #{ip}
          CONFIG:
            consoleport: 443
        EOS

        File.open(@settings[:systest_config], 'w') { |file| file.write(config) }
      end

      def write_scenario_to_file(id, scenario)
        filename = "#{id}.json"
        scenario_file = File.join(ENV['PWD'], "../simulation-runner/config/scenarios/#{filename}")
        File.open(scenario_file, 'w') { |file| file.write(JSON.pretty_generate(scenario)) }
        return filename
      end
    end

    class Runner
      def extract_settings(json)
        settings = {}

        master_info = json["master"]
        raise 'Master information is required' unless master_info
        if master_info.is_a? String
          settings[:master_hostname] = master_info
          settings[:puppet_master] = master_info
          settings[:master_ip] = nil
        elsif master_info.is_a? Hash
          settings[:master_hostname] = master_info["hostname"]
          settings[:master_ip] = master_info["ip"]
          settings[:puppet_master] = master_info["ip"]
        end

        # Default value taken from puppet-acceptance/options_parsing.rb
        settings[:ssh_keyfile] = json["ssh-keyfile"] || "~/.ssh/id_rsa"

        settings[:systest_config] = File.join(ENV['PWD'], "gatling-perf-master.cfg")

        settings[:sbtpath] = json["sbtpath"] || "/home/jenkins/sbt-launch.jar"

        return settings
      end

      def remove_comments(config_path)
        new_json = ""
        File.open(config_path, 'r') do |infile|
          while (line = infile.gets)
            unless line.strip.start_with?('#') or line.strip.start_with?('//')
              new_json << line
            end
          end
        end
        new_json
      end

      def run_steps(config_path)
        json = JSON.parse(remove_comments(config_path))
        settings = extract_settings(json)
        steps = json["steps"]
        raise 'Job "steps" are required' unless steps

        tester = Tester.new(settings)

        steps.each do |step|
          if step.is_a? String
            tester.perform(step)
          elsif step.is_a? Hash
            tester.perform(step.first[0], step.first[1])
          end
        end
      end

      def display_help_and_exit
        progname = File.basename( $0 )
        puts "usage:  #{progname} path/to/config.json"
        exit 1
      end

      def run(args = ARGV)
        if args.length > 1
          puts "Too many arguments"
          display_help_and_exit
        end

        case args.first
        when '-h', '--help', nil
          display_help_and_exit

        else
          path = File.join(ENV['PWD'], args.first)
          if File.exists?( path )
            run_steps(path)

          else
            display_help_and_exit

          end
        end
      end
    end
  end
end

Puppet::Performance::Runner.new.run( ARGV )
